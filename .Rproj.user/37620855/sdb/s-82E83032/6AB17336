{
    "collab_server" : "",
    "contents" : "\n#' Calculate the score of sentences\n#'\n#' This function loads text and calculates score of each sentence on basis \n#' of presence of words of positive and negative sentiment, presence of negation,\n#' and checking for sarcasm. 0 indicates neutral sentiment. Positive value indicates\n#' positive sentiment. Negative value indicates negative sentiment. 99 indicates\n#' sarcasm.\n#' @param text A vector of sentences or a sentence (English).\n#' @return A vector containing polarity of each sentence.\n#' @examples\n#'calculate_score(\"This is good\")\n#'calculate_score(c(\"This is good\",\"This is bad\"))\n \n#'@export \n\n\ncalculate_score<-function(text){\n  text<-as.character(text)\n  text <- unlist(lapply(text, function(x) { stringr::str_split(x, \"\\n\") })) \n  \n  \n#function to calculate number of words in each category within a sentence\ngetpolarity <- function(sentences, negative_words,positive_words){\n  negation<-c(\"no\",\"not\")\n  polaritys <- plyr::laply(sentences, function(sentence, negative_words,positive_words){\n    \n    \n    if(is.na(sentence))\n      return(-1)\n    if(regexpr(\"[?]\", sentence) > 0 )\n      return(99)\n    if(grepl(\":-(\",sentence,fixed=TRUE))\n      sentence<-paste(sentence, \"bad\",sep=\" \")\n    else if(grepl(\":-)\",sentence,fixed=TRUE)|| grepl(\":)\",sentence,fixed=TRUE))\n      sentence<-paste(sentence, \"good\",sep=\" \")\n    else if(grepl(\":-D\",sentence,fixed=TRUE))\n      sentence<-paste(sentence, \"very good\",sep=\" \")\n    else if(grepl(\":-|\",sentence,fixed=TRUE))\n      sentence<-paste(sentence, \"indifferent\",sep=\" \")\n    else if(grepl(\":-X\",sentence,fixed=TRUE))\n      sentence<-paste(sentence, \"very bad\",sep=\" \")\n    else\n      sentence<-paste(sentence, \"\",sep=\"\")\n    sentence<- iconv(sentence,\"WINDOWS-1252\",\"UTF-8\")\n    #remove unnecessary characters and split up by word\n    sentence <- gsub('[[:punct:]]', '', sentence)\n    sentence <- gsub('[[:cntrl:]]', '', sentence)\n    sentence <- gsub('\\\\d+', '', sentence)\n    sentence <- tolower(sentence)\n    wordList <- stringr::str_split(sentence, '\\\\s+')\n    words <- unlist(wordList)\n    #build vector with matches between sentence and each category\n    positive.matches <-match(words, positive_words)\n    negative.matches <-match(words, negative_words)\n    # get the position of the matched term or NA\n    # we just want a TRUE/FALSE\n    positive_matches <-!is.na(positive.matches)\n    negative_matches <-!is.na(negative.matches)\n    # final score\n    score <-sum(positive_matches) - sum(negative_matches)\n    very.matches<-match(words,c(\"very\",\"most\",\"more\"))\n    very_matches <- !is.na(very.matches)\n    if(score>=0)\n      score<-score+sum(very_matches)\n    else\n      score<-score-sum(very_matches)\n    negation.matches<-match(words,negation)\n    negation_matches <- !is.na(negation.matches)\n    \n    if(score>=0)\n    {\n      if(sum(negation_matches)>0)\n        score<-(-score)\n    }\n    else\n    {\n      if(sum(negation_matches)<0)\n        score<-(-score)\n    }\n    \n    return(score)\n    \n    \n  }, negative_words, positive_words)\n  \n  return(polaritys)\n}    \nnegative_words<- iconv(negative_words,\"WINDOWS-1252\",\"UTF-8\")\npositive_words<- iconv(positive_words,\"WINDOWS-1252\",\"UTF-8\")\n\n#build tables of positive and negative sentences with polaritys\nnegative_words <- tolower(negative_words)\npositive_words <- tolower(positive_words)\n\nres<-getpolarity(text,negative_words,positive_words )\nreturn (res)\n}\n\n\n\n#' Predicts the sentiment of sentences\n#'\n#' This function loads text and calculates sentiment of each sentence. It classifies\n#' sentences into 6 categories: Positive, Negative, Very Positive, Very Negative \n#' Sarcasm and Neutral.\n#'\n#' @param text A vector of sentences or a sentence (English).\n#' @return A vector containing sentiment of each sentence.\n\n#' @examples\n#'calculate_sentiment(\"This is good\")\n#'calculate_sentiment(c(\"This is good\",\"This is bad\"))\n#'@export\ncalculate_sentiment<-function(text)\n{\n  \n  res<-calculate_score(text)\n  \nsentiment<-c()\n\n\nfor(i in 1 : length(res))\n{\n  if(res[i]==99)\n  {\n    sentiment[i]<-'Sarcasm'\n    \n  }\n  else\n  {\n    if(res[i]==0)\n    {\n      sentiment[i]<-'Neutral'\n      \n      \n    }\n    else if (res[i]==-1){\n      sentiment[i]<-'Negative'\n      \n    }\n    else if (res[i]==1){\n      sentiment[i]<-'Positive'\n      \n    }\n    else if (res[i]>1){\n      sentiment[i]<-'Very Positive'\n      \n      \n      \n    }\n    else{\n      sentiment[i]<-'Very Negative'\n            \n    }\n    \n    \n    \n  }\n}\nresults<-data.frame(text,sentiment)\nreturn (results)\n}\n#' Calculate the number of sentences in each category of sentiment.\n#'\n#' This function loads text and calculates number of sentences which are positive,\n#' negative, very positive, very negative, neutral and sarcasm.\n#' \n#' @param text A vector of sentences or a sentence (English).\n#' @return A 2-D matrix with two rows and 6 columns where first row contains the name of sentiment\n#' category and the second row contains the number in each category in string format.\n#' @examples\n#'calculate_total_presence_sentiment(c(\"This is good\",\"This is bad\"))\n#'@export\ncalculate_total_presence_sentiment<-function(text){\n  \n  \n  res<-calculate_score(text)\n  \n  \n  score_array<-array(0,dim=c(2,6))\n  score_array[1,1]<-'Sarcasm'\n  score_array[1,2]<-'Neutral'\n  score_array[1,3]<-'Negative'\n  score_array[1,4]<-'Positive'\n  score_array[1,5]<-'Very Negative'\n  score_array[1,6]<-'Very Positive'\n  \n  for(i in 1 : length(res))\n  {\n    if(res[i]==99)\n    {\n     \n      score_array[2,1]<-as.numeric(score_array[2,1])+1\n    }\n    else\n    {\n      if(res[i]==0)\n      {\n        \n        score_array[2,2]<-as.numeric(score_array[2,2])+1\n        \n      }\n      else if (res[i]==-1){\n        \n        score_array[2,3]<-as.numeric(score_array[2,3])+1\n      }\n      else if (res[i]==1){\n        \n        score_array[2,4]<-as.numeric(score_array[2,4])+1\n      }\n      else if (res[i]>1){\n        \n        score_array[2,6]<-as.numeric(score_array[2,6])+1\n        \n        \n      }\n      else{\n        \n        score_array[2,5]<-as.numeric(score_array[2,5])+1\n        \n      }\n      \n      \n      \n    }\n  }\n  \n  return (score_array)\n}\n\n\n",
    "created" : 1462289384520.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3165303712",
    "id" : "6AB17336",
    "lastKnownWriteTime" : 1465133270,
    "last_content_update" : 1465133270455,
    "path" : "~/Desktop/RSentiment_linux/RSentiment/RSentiment/R/test.R",
    "project_path" : "R/test.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}