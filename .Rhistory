calculate_score("This help")
calculate_score("This does not help")
calculate_score("This does not help")
load("E:/R/RSentiment/help/sysdata.rda")
calculate_score("This does")
wordList <- stringr::str_split(sentence, '\\s+')
words <- unlist(wordList)
wordList <- stringr::str_split(x, '\\s+')
words <- unlist(x)
if(grepl("R R V", r2)|grepl("V R V", r2) )
{
onlyVerb<-df[which(df$r1=='V'|df$r1=='M'),]
verbs<-onlyVerb$words
positive.matches <-match(verbs, positive_words)
negative.matches <-match(verbs, negative_words)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches <-!is.na(positive.matches)
negative_matches <-!is.na(negative.matches)
score <-(sum(positive_matches) - sum(negative_matches))
df<-df[which(!df$r1=='V'& !df$r1=='M'),]
words<-df$words
r2<-paste(df$r1,collapse=" ")
s<-check_adjectives_noun(r2,words,df)
if(score<0)
s<-(-s)
}
return(s)
for(i in 1 : length(r1))
{
r1[i]<-substring(r1[i],1,1)
}
df<-data.frame(r1,words)
df<-df[!df$r1=='D',]
words<-df$words
r2 <- paste(df$r1, collapse = " ")
if(grepl("R R V", r2)|grepl("V R V", r2) )
{
onlyVerb<-df[which(df$r1=='V'|df$r1=='M'),]
verbs<-onlyVerb$words
positive.matches <-match(verbs, positive_words)
negative.matches <-match(verbs, negative_words)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches <-!is.na(positive.matches)
negative_matches <-!is.na(negative.matches)
score <-(sum(positive_matches) - sum(negative_matches))
df<-df[which(!df$r1=='V'& !df$r1=='M'),]
words<-df$words
r2<-paste(df$r1,collapse=" ")
s<-check_adjectives_noun(r2,words,df)
if(score<0)
s<-(-s)
}
if(grepl("R R V", r2)|grepl("V R V", r2) )
{
onlyVerb<-df[which(df$r1=='V'|df$r1=='M'),]
verbs<-onlyVerb$words
positive.matches <-match(verbs, positive_words)
negative.matches <-match(verbs, negative_words)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches <-!is.na(positive.matches)
negative_matches <-!is.na(negative.matches)
score <-(sum(positive_matches) - sum(negative_matches))
df<-df[which(!df$r1=='V'& !df$r1=='M'),]
words<-df$words
r2<-paste(df$r1,collapse=" ")
}
r2
score
x
verbs
r2
if(grepl("R R V", r2)|grepl("V R V", r2) )
{
onlyVerb<-df[which(df$r1=='V'|df$r1=='M'),]
verbs<-onlyVerb$words
positive.matches <-match(verbs, positive_words)
negative.matches <-match(verbs, negative_words)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches <-!is.na(positive.matches)
negative_matches <-!is.na(negative.matches)
score <-(sum(positive_matches) - sum(negative_matches))
df<-df[which(!df$r1=='V'& !df$r1=='M'),]
words<-df$words
r2<-paste(df$r1,collapse=" ")
}
y1 <- NLP::annotate(x, list(sent_token_annotator, word_token_annotator))
y2<- NLP::annotate(x, pos_tag_annotator, y1)
y2w <- subset(y2, type=="word")
tags <- sapply(y2w$features, '[[', "POS")
r1 <- sprintf("%s",  tags)
for(i in 1 : length(r1))
{
r1[i]<-substring(r1[i],1,1)
}
df<-data.frame(r1,words)
df<-df[!df$r1=='D',]
words<-df$words
r2 <- paste(df$r1, collapse = " ")
r2
s<-100
if(grepl("R R V", r2)|grepl("V R V", r2) )
{
onlyVerb<-df[which(df$r1=='V'|df$r1=='M'),]
verbs<-onlyVerb$words
positive.matches <-match(verbs, positive_words)
negative.matches <-match(verbs, negative_words)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches <-!is.na(positive.matches)
negative_matches <-!is.na(negative.matches)
score <-(sum(positive_matches) - sum(negative_matches))
df<-df[which(!df$r1=='V'& !df$r1=='M'),]
words<-df$words
r2<-paste(df$r1,collapse=" ")
s<-check_adjectives_noun(r2,words,df)
if(score<0)
s<-(-s)
}
s<-100
if(grepl("R R V", r2)|grepl("V R V", r2) )
{
onlyVerb<-df[which(df$r1=='V'|df$r1=='M'),]
verbs<-onlyVerb$words
positive.matches <-match(verbs, positive_words)
negative.matches <-match(verbs, negative_words)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches <-!is.na(positive.matches)
negative_matches <-!is.na(negative.matches)
score <-(sum(positive_matches) - sum(negative_matches))
df<-df[which(!df$r1=='V'& !df$r1=='M'),]
words<-df$words
r2<-paste(df$r1,collapse=" ")
s<-check_adjectives_noun(r2,words,df)
}
grepl("V R V", r2)
r2
y1 <- NLP::annotate(x, list(sent_token_annotator, word_token_annotator))
y2<- NLP::annotate(x, pos_tag_annotator, y1)
y2w <- subset(y2, type=="word")
tags <- sapply(y2w$features, '[[', "POS")
r1 <- sprintf("%s",  tags)
for(i in 1 : length(r1))
{
r1[i]<-substring(r1[i],1,1)
}
df<-data.frame(r1,words)
df<-df[!df$r1=='D',]
words<-df$words
r2 <- paste(df$r1, collapse = " ")
grepl("V R V", r2)
onlyVerb<-df[which(df$r1=='V'|df$r1=='M'),]
verbs<-onlyVerb$words
verbs
onlyVerb
df
y1 <- NLP::annotate(x, list(sent_token_annotator, word_token_annotator))
y2<- NLP::annotate(x, pos_tag_annotator, y1)
y2w <- subset(y2, type=="word")
tags <- sapply(y2w$features, '[[', "POS")
r1 <- sprintf("%s",  tags)
for(i in 1 : length(r1))
{
r1[i]<-substring(r1[i],1,1)
}
df<-data.frame(r1,words)
df<-df[!df$r1=='D',]
words<-df$words
r2 <- paste(df$r1, collapse = " ")
df
frame <-read.csv("E:/R/R files/Data.csv")
frame
frame$text_1
library("RSentiment")
calculate_score(frame$text_1)
calculate_score(frame$text_1)
library(RSentiment)
calculate_score(frame$text_1)
str_replace_all("theâ€", "[^[:alnum:]]", " ")
library("stringr")
str_replace_all("theâ€", "[^[:alnum:]]", " ")
gsub("[[:punct:]]|[[:space:]]", "", iconv("theâ€", to = "ASCII//TRANSLIT"))
gsub("[[:punct:]]|[[:space:]]", "", iconv("theâ€!..", to = "ASCII//TRANSLIT"))
library(RSentiment)
calculate_score(frame$text_1)
library(RSentiment)
library(RSentiment)
calculate_score(I am bad"")
calculate_score("I am bad)
)
""
"
calculate_score("I am bad")
calculate_score("This is very good")
library(RSentiment)
calculate_score("This is very good")
sentence<-"This is very good"
sentence<-gsub("[[:punct:]]|[[:space:]]", "", iconv(sentence, to = "ASCII//TRANSLIT"))
sentence
sentence<-gsub("[[:punct:]]", "", iconv(sentence, to = "ASCII//TRANSLIT"))
sentence
sentence<-"This is very good"
sentence<-gsub("[[:punct:]]", "", iconv(sentence, to = "ASCII//TRANSLIT"))
sentence
frame$text_1[22]
frame$text_1[21]
sentence<-frame$text_1[21]
sentence
sentence<- iconv(sentence,"WINDOWS-1252","UTF-8")
sentence
library(RSentiment)
calculate_score(frame$text_1)
calculate_score("This is very good")
library("RSentiment")
calculate_sentiment("This helps")
calculate_sentiment("This doesn't help")
calculate_sentiment("This does not help")
library(RSentiment)
calculate_sentiment("This does not help")
library(RSentiment)
calculate_sentiment("This does not help")
df<-data.frame()
df<-data.frame(r1,words)
df
df$r1<-c()
df$r1<-c(V,R,V)
df$r1<-c('V','R','V')
r1<-c('V','R','V')
words<-c('does','not','help')
df<-data.frame(r1,words)
df
onlyVerb<-df[which(df$r1=='V'|df$r1=='M'),]
onlyVerb
library(RSentiment)
calculate_sentiment("This does not help")
library(RSentiment)
calculate_sentiment("This does not help")
library(RSentiment)
calculate_sentiment("This does not help")
calculate_sentiment("This never helps")
calculate_sentiment("This doesn't help")
calculate_sentiment("This never helps")
library(RSentiment)
calculate_sentiment("This never helps")
library(RSentiment)
library(RSentiment)
calculate_sentiment("This doesn't help")
library(RSentiment)
calculate_sentiment("This never helps")
library(RSentiment)
calculate_sentiment("This never helps")
calculate_sentiment("This never helps")
library(RSentiment)
calculate_sentiment("This is bad")
library(RSentiment)
library(RSentiment)
calculate_sentiment("This never helps")
library(RSentiment)
calculate_sentiment(“The concert wasn’t bad at all”)
calculate_sentiment("The concert wasn’t bad at all")
calculate_sentiment("The concert wasn’t bad at all")
library(RSentiment)
calculate_sentiment("The concert was bad")
calculate_sentiment("The concert was bad")
calculate_sentiment("The concert was not bad")
calculate_sentiment("The concert wasn't bad")
library(RSentiment)
calculate_sentiment("The concert wasn't bad")
calculate_sentiment("The concert wasn't bad at all")
calculate_total_presence_sentiment(c("I am bad","This is very good"))
calculate_total_presence_sentiment(c("I am bad","This is very good","I am very bad"))
calculate_total_presence_sentiment(c("I am bad","This is very good","I am very bad","I am neutral"))
calculate_total_presence_sentiment(c("I am bad","This is very good","I am very bad","I am neutral","I am good"))
library(RSentiment)
calculate_sentiment("Vamshi killed demon")
calculate_sentiment("Vamshi killed me")
calculate_sentiment("Vamshi killed none")
library(RSentiment)
calculate_sentiment("Vamshi killed none")
library(RSentiment)
library(RSentiment)
calculate_sentiment("Vamshi killed none")
library(RSentiment)
calculate_sentiment("Vamshi killed none")
library(RSentiment)
library(RSentiment)
calculate_sentiment("Vamshi killed none")
library(RSentiment)
calculate_sentiment("Vamshi killed none")
calculate_sentiment("Vamshi killed me")
calculate_sentiment("Vamshi killed demon")
library(RSentiment)
calculate_sentiment("Vamshi killed demon")
library(RSentiment)
calculate_sentiment("Vamshi killed demon")
calculate_sentiment("Vamshi killed me")
calculate_sentiment("Vamshi killed none")
library(RSentiment)
calculate_sentiment("Vamshi killed none")
calculate_sentiment("Vamshi killed demo")
calculate_sentiment("Vamshi killed me")
calculate_sentiment("Vamshi killed demon")
calculate_sentiment("Vamshi killed demon")
library(RSentiment)
library(RSentiment)
calculate_sentiment("Vamshi killed demon")
calculate_sentiment("Vamshi killed ram")
library(RSentiment)
calculate_sentiment("Vamshi killed demon")
calculate_sentiment("Vamshi killed ram")
data<-read.csv("E:\R\R files\Val_RSentiment.csv")
data<-read.csv("E:/R/R files/Val_RSentiment.csv")
data
calculate_score(data$V1)
calculate_score(data$V1)
library(RSentiment)
calculate_score(data$V1)
calculate_sentiment(data$V1)
library("RSentiment")
calculate_sentiment(data$V1)
options(java.parameters = "-Xmx8g")
library(RSentiment)
calculate_sentiment(data$V1)
gc()
options(java.parameters = "- Xmx1024m")
tab<-calculate_sentiment(data$V1)
library(RSentiment)
gc()
calculate_sentiment(data$V1)
library(readr)
Val_RSentiment <- read_csv("E:/R/R files/Val_RSentiment.csv")
View(Val_RSentiment)
value<-Val_RSentiment$V1[1:100]
value
calculate_sentiment(value)
library("RSentiment")
calculate_sentiment(value)
value<-Val_RSentiment$V1[1:10]
calculate_sentiment(value)
value<-Val_RSentiment$V1[1:5]
calculate_sentiment(value)
library(RSentiment)
calculate_sentiment("That book was better than this")
calculate_sentiment("This is better")
calculate_sentiment("This is better than that")
calculate_sentiment("This is worse")
calculate_sentiment("This is very good")
calculate_sentiment("This is good")
calculate_sentiment("good")
calculate_score("good")
calculate_score("This is very good")
library(RSentiment)
calculate_score("This is very good")
library(RSentiment)
calculate_score("This is very good")
library(RSentiment)
calculate_score("This is very good")
calculate_score(c("This package is doing well","This is an average package","Package is not working well"))
load("C:/Users/Subhasree/Documents/NewData.Rda")
k<-load("C:/Users/Subhasree/Documents/NewData.Rda")
k
k<-load("C:/Users/Subhasree/Documents/NewData.Rda")
k
load("C:/Users/Subhasree/Documents/NewData.Rda")
positive_words
negative_words
load("C:/Users/Subhasree/Documents/NewData.Rda")
negative_words
positive_words
RSentiment::calculate_score(c("This package is doing well","This is an average package","Package is not working well")
)
)
RSentiment::calculate_score(c("This package is doing well","This is an average package","Package is not working well"))
RSentiment::calculate_score(c("This package is doing well","This is an average package","Package is not working well"))
library(RSentiment)
(RSentiment::calculate_score(c("This package is doing well","This is an average package","Package is not working well")))
library(RSentiment)
library("openNLP", lib.loc="~/R/win-library/3.2")
install.packages(c("htmltools", "knitr"))
install.packages("htmltools")
install.packages("rmarkdown")
library("RSentiment")
calculate_score(c("I am good"))
calculate_score(c("I am good","I am bad"))
install.packages("rprojroot")
devtools::use_vignette("Introduction.Rmd")
devtools::use_vignette("Introduction")
devtools::build_vignettes()
remove.packages("yaml", lib="~/R/win-library/3.2")
install.packages("yaml")
devtools::build_vignettes()
install.packages("digest")
devtools::build_vignettes()
library(RSentiment)
rmarkdown::render
devtools::use_vignette("Welcome")
library(RSentiment)
library(RSentiment)
library("RSentiment")
calculate_sentiment(c("This is very good","This is bad"))
calculate_score(c("This is very good","This is bad"))
library(RSentiment)
calculate_score(c("This is very good","This is bad"))
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
library("syuzhet")
nrc_dictionary<-get_sentiment_dictionary(dictionary = "nrc")
afinn_dictionary<-get_sentiment_dictionary(dictionary = "afinn")
syuzhet_dictionary<-get_sentiment_dictionary(dictionary = "syuzhet")
bing_dictionary<-get_sentiment_dictionary(dictionary = "bing")
load("E:/R/RSentiment/help/sysdata.rda")
nrc_dictionary<-subset(nrc_dictionary,negative >0)
afinn_dictionary<-subset(afinn_dictionary,value <0)
syuzhet_dictionary<-subset(syuzhet_dictionary,value<0)
bing_dictionary<-subset(bing_dictionary,value<0)
negative_words<-c(as.character(negative_words),rownames(nrc_dictionary),as.character(bing_dictionary$word),as.character(syuzhet_dictionary$word),as.character(afinn_dictionary$word))
negative_words<-unique(negative_words)
nrc_dictionary<-get_sentiment_dictionary(dictionary = "nrc")
afinn_dictionary<-get_sentiment_dictionary(dictionary = "afinn")
syuzhet_dictionary<-get_sentiment_dictionary(dictionary = "syuzhet")
bing_dictionary<-get_sentiment_dictionary(dictionary = "bing")
nrc_dictionary<-subset(nrc_dictionary,positive >0)
afinn_dictionary<-subset(afinn_dictionary,value >0)
syuzhet_dictionary<-subset(syuzhet_dictionary,value>0)
bing_dictionary<-subset(bing_dictionary,value>0)
positive_words<-c(as.character(positive_words),rownames(nrc_dictionary),as.character(bing_dictionary$word),as.character(syuzhet_dictionary$word),as.character(afinn_dictionary$word))
positive_words<-unique(positive_words)
save(negative_words,positive_words,file="sysdata.rda")
library("syuzhet")
nrc_dictionary<-get_sentiment_dictionary(dictionary = "nrc")
afinn_dictionary<-get_sentiment_dictionary(dictionary = "afinn")
syuzhet_dictionary<-get_sentiment_dictionary(dictionary = "syuzhet")
bing_dictionary<-get_sentiment_dictionary(dictionary = "bing")
load("E:/R/RSentiment/help/sysdata.rda")
nrc_dictionary<-subset(nrc_dictionary,negative >0)
afinn_dictionary<-subset(afinn_dictionary,value <0)
syuzhet_dictionary<-subset(syuzhet_dictionary,value<0)
bing_dictionary<-subset(bing_dictionary,value<0)
negative_words<-c(as.character(negative_words),rownames(nrc_dictionary),as.character(bing_dictionary$word),as.character(syuzhet_dictionary$word),as.character(afinn_dictionary$word))
negative_words<-unique(negative_words)
nrc_dictionary<-get_sentiment_dictionary(dictionary = "nrc")
afinn_dictionary<-get_sentiment_dictionary(dictionary = "afinn")
syuzhet_dictionary<-get_sentiment_dictionary(dictionary = "syuzhet")
bing_dictionary<-get_sentiment_dictionary(dictionary = "bing")
nrc_dictionary<-subset(nrc_dictionary,positive >0)
afinn_dictionary<-subset(afinn_dictionary,value >0)
syuzhet_dictionary<-subset(syuzhet_dictionary,value>0)
bing_dictionary<-subset(bing_dictionary,value>0)
positive_words<-c(as.character(positive_words),rownames(nrc_dictionary),as.character(bing_dictionary$word),as.character(syuzhet_dictionary$word),as.character(afinn_dictionary$word))
positive_words<-unique(positive_words)
save(negative_words,positive_words,file="system.rda")
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
library(RSentiment)
calculate_score("This is bad")
install.packages("RSentiment")
calculate_score(c("This is bad","This is good"))
library("RSentiment")
calculate_score(c("This is bad","This is good"))
calculate_score("This is bad")
calculate_score("This is good")
install.packages("profvis")
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
library(profvis)
profvis({
data(calculate_score(c("This is done")), package = "RSentiment")
})
library(profvis)
profvis({
calculate_score(c("This is done"))
})
library(profvis)
profvis({
calculate_score(c("This is done"))
})
profvis({
library("RSentiment")
calculate_score(c("This is done"))
})
profvis({
library("RSentiment")
devtools::load_all()
calculate_score(c("This is done"))
})
