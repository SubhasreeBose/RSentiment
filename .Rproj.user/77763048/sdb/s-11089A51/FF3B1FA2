{
    "collab_server" : "",
    "contents" : "\n\n\n#' Calculate the score of sentences\n#'\n#' This function loads text and calculates score of each sentence on basis\n#' of presence of words of positive and negative sentiment, presence of negation,\n#' and checking for sarcasm. 0 indicates neutral sentiment. Positive value indicates\n#' positive sentiment. Negative value indicates negative sentiment. 99 indicates\n#' sarcasm.\n#' @param text A vector of sentences or a sentence (English).\n#' @return A vector containing polarity of each sentence.\n#' @examples\n#'calculate_score(\"This is good\")\n#'calculate_score(c(\"This is good\",\"This is bad\"))\n\n#'@export\n\n\n\ncalculate_score <- function(text) {\n  \n  text <- as.character(text)\n \n  \n  #split the text by newline\n  # text <-unlist(lapply(text, function(x) {\n  #     stringr::str_split(x, \"\\n\")\n  #   }))\n  \n  check_verb <- function(r2, words, df)\n  {\n    s <- 100\n    if (grepl(\"R R V\", r2) | grepl(\"V R V\", r2))\n    {\n      onlyVerb <- df[which(df$r1 == 'V' | df$r1 == 'M'), ]\n      verbs <- onlyVerb$words\n      positive.matches <- match(verbs, positive_words)\n      negative.matches <- match(verbs, negative_words)\n      # get the position of the matched term or NA\n      # we just want a TRUE/FALSE\n      positive_matches <- !is.na(positive.matches)\n      negative_matches <- !is.na(negative.matches)\n      score <- (sum(positive_matches) - sum(negative_matches))\n      df <- df[which(!df$r1 == 'V' & !df$r1 == 'M'), ]\n      words <- df$words\n      r2 <- paste(df$r1, collapse = \" \")\n      \n      s <- check_adjectives_noun(r2, words, df)\n      if (score < 0)\n        s <- (-s)\n      \n      \n      \n    }\n    return(s)\n    \n  }\n  \n  check_adjectives_noun <- function(r2, words, df)\n  {\n    score <- 0\n    if (grepl(\"R\", r2))\n    {\n      for (i in 1:nrow(df))\n      {\n        if (substring(df$r1[i], 1, 1) == \"R\")\n        {\n          negation.matches <- match(words[i], c(\"not\", \"none\", \"no\", \"never\"))\n          score <- (-1)\n          break\n        }\n        \n      }\n      \n      \n      \n      \n      \n    }\n    \n    \n    if (grepl(\"R J\", r2))\n    {\n      for (i in 1:nrow(df))\n      {\n        if (substring(df$r1[i], 1, 1) == \"R\" &&\n            substring(df$r1[i + 1], 1, 1) == \"J\")\n        {\n          negation.matches <- match(words[i],  c(\"not\", \"none\", \"no\", \"never\"))\n          positive.matches <- match(df$words[i + 1], positive_words)\n          negative.matches <- match(df$words[i + 1], negative_words)\n          # get the position of the matched term or NA\n          # we just want a TRUE/FALSE\n          positive_matches <- !is.na(positive.matches)\n          negative_matches <- !is.na(negative.matches)\n          negation_matches <- !is.na(negation.matches)\n          \n          # final score\n          score <- (sum(positive_matches) - sum(negative_matches))\n          if (negation_matches > 0)\n            score <- (-score)\n          \n          break\n          \n        }\n        \n      }\n      \n    }\n    if (grepl(\"R R J\", r2))\n    {\n      #print(\"Entered\")\n      for (i in 1:nrow(df))\n      {\n        if (substring(df$r1[i], 1, 1) == \"R\" &&\n            substring(df$r1[i + 1], 1, 1) == \"R\" &&\n            substring(df$r1[i + 2], 1, 1) == \"J\")\n        {\n          # print(\"Entered\")\n          negation.matches <-\n            match(words[i],  c(\"not\", \"none\", \"no\", \"never\"))\n          positive.matches <- match(df$words[i + 2], positive_words)\n          negative.matches <- match(df$words[i + 2], negative_words)\n          # get the position of the matched term or NA\n          # we just want a TRUE/FALSE\n          positive_matches <- !is.na(positive.matches)\n          negative_matches <- !is.na(negative.matches)\n          negation_matches <- !is.na(negation.matches)\n          \n          # final score\n          score <- (sum(positive_matches) - sum(negative_matches))\n          \n          if (negation_matches > 0)\n            score <- (-score)\n          \n          break\n          \n        }\n        \n      }\n      \n    }\n    if (grepl(\"R R R\", r2))\n    {\n      #print(\"Entered\")\n      for (i in 1:nrow(df))\n      {\n        if (substring(df$r1[i], 1, 1) == \"R\" &&\n            substring(df$r1[i + 1], 1, 1) == \"R\" &&\n            substring(df$r1[i + 2], 1, 1) == \"R\")\n        {\n          #print(\"Entered\")\n          negation.matches <-\n            match(words[i],  c(\"not\", \"none\", \"no\", \"never\"))\n          positive.matches <- match(df$words[i + 2], positive_words)\n          negative.matches <- match(df$words[i + 2], negative_words)\n          # get the position of the matched term or NA\n          # we just want a TRUE/FALSE\n          positive_matches <- !is.na(positive.matches)\n          negative_matches <- !is.na(negative.matches)\n          negation_matches <- !is.na(negation.matches)\n          \n          # final score\n          score <- (sum(positive_matches) - sum(negative_matches))\n          if (negation_matches > 0)\n            score <- (-score)\n          \n          break\n          \n        }\n        \n      }\n      \n    }\n    if (grepl(\"R R\", r2))\n    {\n      for (i in 1:nrow(df))\n      {\n        if (substring(df$r1[i], 1, 1) == \"R\" &&\n            substring(df$r1[i + 1], 1, 1) == \"R\")\n        {\n          negation.matches <- match(words[i],  c(\"not\", \"none\", \"no\", \"never\"))\n          positive.matches <- match(df$words[i + 1], positive_words)\n          negative.matches <- match(df$words[i + 1], negative_words)\n          # get the position of the matched term or NA\n          # we just want a TRUE/FALSE\n          positive_matches <- !is.na(positive.matches)\n          negative_matches <- !is.na(negative.matches)\n          negation_matches <- !is.na(negation.matches)\n          \n          # final score\n          score <- (sum(positive_matches) - sum(negative_matches))\n          if (negation_matches > 0)\n            score <- (-score)\n          \n          break\n          \n        }\n        \n      }\n      \n    }\n    \n    if (grepl(\"V N\", r2))\n    {\n      for (i in 1:nrow(df))\n      {\n        if (substring(df$r1[i], 1, 1) == \"V\" &&\n            substring(df$r1[i + 1], 1, 1) == \"N\")\n        {\n          negation.matches <- match(words[i + 1], c(\"none\", \"nobody\", \"nothing\"))\n          positiveV.matches <- match(df$words[i], positive_words)\n          negativeV.matches <- match(df$words[i], negative_words)\n          \n          positiveN.matches <- match(df$words[i + 1], positive_words)\n          negativeN.matches <- match(df$words[i + 1], negative_words)\n          # get the position of the matched term or NA\n          # we just want a TRUE/FALSE\n          positiveV_matches <- !is.na(positiveV.matches)\n          negativeV_matches <- !is.na(negativeV.matches)\n          negation_matches <- !is.na(negation.matches)\n          positiveN_matches <- !is.na(positiveN.matches)\n          negativeN_matches <- !is.na(negativeN.matches)\n          \n          # final score\n          vscore <- (sum(positiveV_matches) - sum(negativeV_matches))\n          nscore <- (sum(positiveN_matches) - sum(negativeN_matches))\n          if (nscore == 0)\n            score <- vscore\n          else\n          {\n            if (vscore < 0)\n              score <- (-nscore)\n            else\n              score <- nscore\n          }\n          if (negation_matches > 0)\n            score <- (-score)\n          \n          break\n          \n        }\n        \n      }\n    }\n    return(score)\n  }\n  \n  #function to tag parts of speech of each sentence\n  POStag <- function(x, words)\n  {\n    type <- \"\"\n    sent_token_annotator <- openNLP::Maxent_Sent_Token_Annotator()\n    word_token_annotator <- openNLP::Maxent_Word_Token_Annotator()\n    pos_tag_annotator <-  openNLP::Maxent_POS_Tag_Annotator()\n    y1 <-NLP::annotate(x, list(sent_token_annotator, word_token_annotator))\n    y2 <- NLP::annotate(x, pos_tag_annotator, y1)\n    \n    y2w <- subset(y2, type == \"word\")\n    tags <- sapply(y2w$features, '[[', \"POS\")\n    r1 <- sprintf(\"%s\",  tags)\n    for (i in 1:length(r1))\n    {\n      r1[i] <- substring(r1[i], 1, 1)\n    }\n    \n    \n    df <- data.frame(r1, words)\n    df <- df[!df$r1 == 'D', ]\n    words <- df$words\n    r2 <- paste(df$r1, collapse = \" \")\n    \n    score_adj <- check_adjectives_noun(r2, words, df)\n    \n    score_verb <- check_verb(r2, words, df)\n    \n    if (score_verb == 100)\n      return (score_adj)\n    else\n      return(score_verb)\n    \n  }\n  #function to calculate number of words in each category within a sentence\n  getpolarity <- function(sentences,\n                          negative_words,\n                          positive_words) {\n    negation <- c(\"no\", \"not\", \"none\", \"nobody\", \"nothing\", \"never\")\n    polaritys <-\n      plyr::laply(sentences, function(sentence,\n                                      negative_words,\n                                      positive_words) {\n        \n\n        \n        if (is.na(sentence))\n          return(NA)\n        \n        #checking emoticons\n        if (regexpr(\"[?]\", sentence) > 0)\n          return(99)\n        if (grepl(\":-(\", sentence, fixed = TRUE))\n          sentence <- paste(sentence, \"bad\", sep = \" \")\n        else if (grepl(\":-)\", sentence, fixed = TRUE) ||\n                 grepl(\":)\", sentence, fixed = TRUE))\n          sentence <- paste(sentence, \"good\", sep = \" \")\n        else if (grepl(\":-D\", sentence, fixed = TRUE))\n          sentence <- paste(sentence, \"very good\", sep = \" \")\n        else if (grepl(\":-|\", sentence, fixed = TRUE))\n          sentence <- paste(sentence, \"indifferent\", sep = \" \")\n        else if (grepl(\":-X\", sentence, fixed = TRUE))\n          sentence <- paste(sentence, \"very bad\", sep = \" \")\n        else\n          sentence <- paste(sentence, \"\", sep = \"\")\n        \n        \n       sentence <- iconv(sentence, \"WINDOWS-1252\", \"UTF-8\")\n        \n        #remove unnecessary characters and split up by word\n        trim <- function (x)\n          gsub(\"^\\\\s+|\\\\s+$\", \"\", x)\n        \n        #n't is equivalent to not\n        sentence <- gsub(\"n't\", \" not\", sentence)\n        \n        sentence <- trim(sentence)\n        \n        sentence <- gsub('[[:punct:]]', '', iconv(sentence, to = \"ASCII//TRANSLIT\"))\n        sentence <- gsub('[[:cntrl:]]', '', iconv(sentence, to = \"ASCII//TRANSLIT\"))\n        \n        sentence<-stringr::str_trim(iconv(sentence, to = \"ASCII//TRANSLIT\"))\n        \n        #sentence<-gsub(\"[[:punct:]]\",\"\",iconv(sentence, to = \"ASCII//TRANSLIT\"))\n        sentence <- tolower(sentence)\n        \n        wordList <- stringr::str_split(sentence, '\\\\s+')\n        \n        words <- unlist(wordList)\n        \n        #build vector with matches between sentence and each category\n        positive.matches <- match(words, positive_words)\n        negative.matches <- match(words, negative_words)\n        \n        # get the position of the matched term or NA\n        # we just want a TRUE/FALSE\n        positive_matches <- !is.na(positive.matches)\n        negative_matches <- !is.na(negative.matches)\n        \n        # final score\n        score <- sum(positive_matches) - sum(negative_matches)\n        \n        very.matches <- match(words, c(\"very\", \"most\", \"more\"))\n        very_matches <- !is.na(very.matches)\n        if (score >= 0)\n          score <- score + sum(very_matches)\n        else\n          score <- score - sum(very_matches)\n        \n        negation.matches <- match(words, negation)\n        negation_matches <- !is.na(negation.matches)\n        \n        print (paste(\"Processing sentence:\", sentence, sep=\" \"))\n        \n        \n        if (sum(negation_matches) > 0)\n          score <- POStag(sentence, words)\n        \n        \n        return(score)\n        \n        \n      }, negative_words, positive_words)\n    \n    return(polaritys)\n  }\n  \n  negative_words <- iconv(negative_words, \"WINDOWS-1252\", \"UTF-8\")\n  positive_words <- iconv(positive_words, \"WINDOWS-1252\", \"UTF-8\")\n  \n  #build tables of positive and negative sentences with polaritys\n  negative_words <- tolower(negative_words)\n  positive_words <- tolower(positive_words)\n  \n  res <- getpolarity(text, negative_words, positive_words)\n\n  return (res)\n}\n\n\n\n#' Predicts the sentiment of sentences\n#'\n#' This function loads text and calculates sentiment of each sentence. It classifies\n#' sentences into 6 categories: Positive, Negative, Very Positive, Very Negative\n#' Sarcasm and Neutral.\n#'\n#' @param text A vector of sentences or a sentence (English).\n#' @return A vector containing sentiment of each sentence.\n\n#' @examples\n#'calculate_sentiment(\"This is good\")\n#'calculate_sentiment(c(\"This is good\",\"This is bad\"))\n#'@export\ncalculate_sentiment <- function(text)\n{\n  res <- calculate_score(text)\n  \n  sentiment <- c()\n  \n  \n  for (i in 1:length(res))\n  {\n    if (res[i] == 0)\n    {\n      sentiment[i] <- 'Neutral'\n      \n      \n    }\n    else if (res[i] == -1) {\n      sentiment[i] <- 'Negative'\n      \n    }\n    else if (res[i] == 1) {\n      sentiment[i] <- 'Positive'\n      \n    }\n    else if (res[i] > 1) {\n      sentiment[i] <- 'Very Positive'\n      \n      \n      \n    }\n    else if (res[i] == 99)\n    {\n      sentiment[i] <- 'Sarcasm'\n    }\n    else{\n      sentiment[i] <- 'Very Negative'\n      \n    }\n    \n    \n    \n    \n  }\n  results <- data.frame(text, sentiment)\n  return (results)\n}\n#' Calculate the number of sentences in each category of sentiment.\n#'\n#' This function loads text and calculates number of sentences which are positive,\n#' negative, very positive, very negative, neutral and sarcasm.\n#'\n#' @param text A vector of sentences or a sentence (English).\n#' @return A 2-D matrix with two rows and 6 columns where first row contains the name of sentiment\n#' category and the second row contains the number in each category in string format.\n#' @examples\n#'calculate_total_presence_sentiment(c(\"This is good\",\"This is bad\"))\n#'@export\ncalculate_total_presence_sentiment <- function(text) {\n  res <- calculate_score(text)\n  \n  \n  score_array <- array(0, dim = c(2, 6))\n  score_array[1, 1] <- 'Sarcasm'\n  score_array[1, 2] <- 'Negative'\n  score_array[1, 3] <- 'Very Negative'\n  score_array[1, 4] <- 'Neutral'\n  score_array[1, 5] <- 'Positive'\n  score_array[1, 6] <- 'Very Positive'\n  \n  for (i in 1:length(res))\n  {\n    if (res[i] == 99)\n    {\n      score_array[2, 1] <- as.numeric(score_array[2, 1]) + 1\n    }\n    else if (res[i] == 0)\n    {\n      score_array[2, 4] <- as.numeric(score_array[2, 4]) + 1\n      \n    }\n    else if (res[i] == -1) {\n      score_array[2, 2] <- as.numeric(score_array[2, 2]) + 1\n    }\n    else if (res[i] == 1) {\n      score_array[2, 5] <- as.numeric(score_array[2, 5]) + 1\n    }\n    else if (res[i] > 1) {\n      score_array[2, 6] <- as.numeric(score_array[2, 6]) + 1\n    }\n    \n    else{\n      score_array[2, 3] <- as.numeric(score_array[2, 3]) + 1\n      \n    }\n    \n    \n    \n    \n  }\n  \n  return (score_array)\n}\n",
    "created" : 1494683856376.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1845415085",
    "id" : "FF3B1FA2",
    "lastKnownWriteTime" : 1500701703,
    "last_content_update" : 1500701703230,
    "path" : "E:/R/My Packages/RSentiment/RSentiment/R/test.R",
    "project_path" : "R/test.R",
    "properties" : {
        "notebook_format" : "word_document"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}